ArithmeticError:Base class for all errors that occur for numeric calculation. You know a math error occurred, but you don’t know the specific error.
AssertionError:Raised in case of failure of the Assert statement.
AttributeError:Raised in case of failure of an attribute reference or assignment.
EOFError:Raised when there is no input from either the raw_input() or input() function and the end of file is reached.
EnvironmentError:Base class for all exceptions that occur outside the Python environment.
Exception:Base class for all exceptions. This catches most exception messages.
FileNotFoundError:Raised when a file or directory is requested but doesn’t exist.
FloatingPointError:Raised when a floating point calculation fails.
IOError:Raised when an input/ output operation fails, such as the print statement or the open() function when trying to open a file that does not exist. Also raised for operating system-related errors.
ImportError:Raised when an import statement fails.
IndentationError:Raised when indentation is not specified properly.
IndexError:Raised when an index is not found in a sequence.
KeyError:Raised when the specified key is not found in the dictionary.
KeyboardInterrupt:Raised when the user interrupts program execution, usually by pressing Ctrl+c.
LookupError:Base class for all lookup errors.
MemoryError:Raised when a operation runs our of memory.
NameError:Raised when an identifier is not found in the local or global namespace.
NotImplementedError:Raised when an abstract method that needs to be implemented in an inherited class is not actually implemented.
OSError:Raises for operating system related errors.
OverflowError:Raised when a calculation exceeds maximum limit for a numeric type.
PermissionError:Raised when trying to run an operation without the adequate access rights.
RecursionError:Raised when the maximum recursion depth has been exceeded.
RuntimeError:Raised when a generated error does not fall into any category.
StandardError:Base class for all built-in exceptions except StopIteration and SystemExit.
StopIteration:Raised when the next() method of an iterator does not point to any object.
SyntaxError:Raised when there is an error in Python syntax.
SystemError:Raised when the interpreter finds an internal problem, but when this error is encountered the Python interpreter does not exit.
SystemExit:Raised when Python interpreter is quit by using the sys.exit() function. If not handled in the code, it causes the interpreter to exit.
TypeError:Raised when an operation or function is attempted that is invalid for the specified data type.
UnboundLocalError:Raised when trying to access a local variable in a function or method but no value has been assigned to it.
ValueError:Raised when the built-in function for a data type has the valid type of arguments, but the arguments have invalid values specified.
ZeroDivisionError:Raised when division or modulo by zero takes place for all numeric types.
